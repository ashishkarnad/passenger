#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2018 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

require 'build/support/vendor/cxx_hinted_parser/lib/cxx_hinted_parser'

def main
  fields = parse_entry_class_fields
  comment copyright_header_for(__FILE__), 1
  separator

  comment %q{
    AppDefinitions/Schema/AutoGeneratedCode.h is automatically generated from
    AppDefinitions/Schema/AutoGeneratedCode.h.cxxcodebuilder by the build system.
    It uses the comment hints from AppDefinitions/Schema.h.

    To force regenerating this file:
      rm -f src/cxx_supportlib/AppDefinitions/Schema/AutoGeneratedCode.h
      rake src/cxx_supportlib/AppDefinitions/Schema/AutoGeneratedCode.h
  }

  separator


  function 'inline void Passenger::AppDefinitions::Schema::Schema()' do
    add_code %Q{
      using namespace ConfigKit;
    }

    separator
    fields.each do |field|
      key_name = key_for(field)

      case field.type
      when 'StaticString'
        type = 'STRING_TYPE'
      when 'StringKeyTable<StaticString>'
        type = 'OBJECT_TYPE'
      when 'boost::container::vector<StaticString>'
        type = 'STRING_ARRAY_TYPE'
      when 'int'
        type = 'INT_TYPE'
      when 'unsigned int'
        type = 'UINT_TYPE'
      when 'bool'
        type = 'BOOL_TYPE'
      else
        raise "Unsupported type #{field.type.inspect}"
      end

      if default_expr = field.metadata[:default]
        add_code %Q{
          add(#{key_name.inspect}, #{type}, OPTIONAL, #{default_expr});
        }
      else
        add_code %Q{
          add(#{key_name.inspect}, #{type}, REQUIRED);
        }
      end
    end

    separator
    add_code %Q{
      finalize();
    }
  end
end

def key_for(field)
  key = field.metadata[:configkit_key_name]
  if key.is_a?(String)
    key
  else
    field.name.gsub(/([A-Z])/, '_\1').downcase
  end
end

def parse_entry_class_fields
  entry_h = File.dirname(__FILE__) + '/../Entry.h'
  parser = CxxHintedParser::Parser.load_file(entry_h).parse
  parser.structs['Entry']
end

main
